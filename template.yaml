AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app
  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  Environment:
    AllowedValues:
      - dev
      - stg
      - prod
    Description: "Environment"
    Type: "String"
    Default: "prod"

  CodePipelineBucketPrefix:
    Description: CodePipeline needs a utility bucket for its internal use. Specify a unique prefix for the bucket name
    Type: String
    Default: codepipeline-work-

  GitHubUser:
    Type: String
    Default: jgomes94
    Description: owner/repository/branch

  GitHubRepository:
    Type: String
    Default: sam-pipeline
    Description: owner/repository/branch

  GitHubBranch:
    Type: String
    Default: master
    Description: owner/repository/branch

  GitHubOAuthToken:
    Type: String
    Default: b5d7c25dd6391c58da8830fb2593e8648fced3ea
    Description: CodePipeline requires an OAuthToken

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      AutoPublishAlias: helloworld
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
  #!ROLES!
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        "Fn::Join":
          [
            "",
            [
              "CodeBuildRole",
              "-",
              !Ref "AWS::StackName",
              "-",
              !Ref "Environment",
            ],
          ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              Service: "cloudformation.amazonaws.com"
            Action: "sts:AssumeRole"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        "Fn::Join":
          [
            "",
            [
              "CodePipelineRole",
              "-",
              !Ref "AWS::StackName",
              "-",
              !Ref "Environment",
            ],
          ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"


  CodeDeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        "Fn::Join":
          [
            "",
            [
              "CodeDeployRole",
              "-",
              !Ref "AWS::StackName",
              "-",
              !Ref "Environment",
            ],
          ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codedeploy.amazonaws.com"
            Action: "sts:AssumeRole"
          - Effect: "Allow"
            Principal:
              Service: "s3.amazonaws.com"
            Action: "sts:AssumeRole"

  #!POLICIES
  CodeBuildPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        "Fn::Join":
          [
            "",
            [
              "CodeBuildPolicy",
              "-",
              !Ref "AWS::StackName",
              "-",
              !Ref "Environment",
            ],
          ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:FilterLogEvents
            - logs:DescribeLogStreams
            - logs:DeleteLogGroup
            - s3:putObject
            - s3:getObject
            - codebuild:*
            - "lambda:Get*"
            - "lambda:List*"
            - "lambda:CreateFunction"
            - "lambda:AddPermission"
            - "lambda:CreateAlias"
            - "lambda:DeleteFunction"
            - "lambda:InvokeFunction"
            - "lambda:PublishVersion"
            - "lambda:RemovePermission"
            - "lambda:Update*"
            - "apigateway:GET"
            - "apigateway:POST"
            - "apigateway:PUT"
            - "apigateway:DELETE"
            - "s3:CreateBucket"
            - "s3:DeleteBucket"
            - "s3:ListBucket"
            - "s3:ListBucketVersions"
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObject"
            - "iam:PassRole"
            - "kinesis:*"
            - "iam:GetRole"
            - "iam:CreateRole"
            - "iam:PutRolePolicy"
            - "iam:DeleteRolePolicy"
            - "iam:DeleteRole"
            - "cloudwatch:GetMetricStatistics"
            - "dynamodb:*"
            - "codedeploy:*"
            - "iam:*"
            - "cloudformation:*"
          Resource: "*"
      Roles:
        - !Ref CodeBuildRole

  CodePipelinePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        "Fn::Join":
          [
            "",
            [
              "CodePipelinePolicy",
              "-",
              !Ref "AWS::StackName",
              "-",
              !Ref "Environment",
            ],
          ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:putObject
            - s3:getObject
            - codebuild:*
            - "codedeploy:*"
          Resource:
            - "*"
      Roles:
        - !Ref CodePipelineRole

  #BUCKET
  S3:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        !Join ["", [!Ref CodePipelineBucketPrefix, "-", !Ref "AWS::Region"]]

  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Join ["", ["DevOps-Pipeline", "-", !Ref "AWS::StackName"]]
      ArtifactStore:
        Location: !Ref S3
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn:
        !Join [
          "",
          [
            "arn:aws:iam::",
            !Ref "AWS::AccountId",
            ":role/",
            !Ref CodePipelineRole,
          ],
        ]
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
                PollForSourceChanges: true
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: sourceCode
        - Name: BuildDeploy
          Actions:
            - Name: Build-Deploy
              RunOrder: 2
              InputArtifacts:
                - Name: sourceCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref BuildDeploy
              OutputArtifacts:
                - Name: BuildOutput

  BuildDeploy:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: Build-Deploy
      Description: Demo of CodeBuild with CodeDeploy pipeline.
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yaml
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: APPLICATION_NAME
            Type: PLAINTEXT
            Value: !Ref CodeDeployApplication
          - Name: DEPLOYMENT_GROUP_NAME
            Type: PLAINTEXT
            Value: !Ref DeploymentGroup
          - Name: BUCKET_DEPLOYMENTS
            Type: PLAINTEXT
            Value: !Ref S3
        Image: aws/codebuild/standard:4.0
      Artifacts:
        Type: CODEPIPELINE

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ComputePlatform: Lambda

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !Sub "${CodeDeployRole.Arn}"
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  CodeBuild:
    Value: !Ref Pipeline
  Environment:
    Value: !Ref Environment
  Github:
    Value: !Ref GitHubRepository
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  CodeBuildPolicy:
    Value: !Ref CodeBuildPolicy
  CodePipelineRole:
    Value: !Ref CodePipelineRole
  CodePipelinePolicy:
    Value: !Ref CodePipelinePolicy
  S3:
    Value: !Ref S3
